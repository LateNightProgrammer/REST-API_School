// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SriSloka.Data;
using SriSloka.Model;
using System;

namespace SriSloka.Api.Migrations
{
    [DbContext(typeof(SriSlokaDbContext))]
    [Migration("20180507113329_AddTokens")]
    partial class AddTokens
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SriSloka.Model.AcadamicHistory", b =>
                {
                    b.Property<int>("AcadamicHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcadamicYear");

                    b.Property<int>("StudentId");

                    b.HasKey("AcadamicHistoryId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("AcadamicHistory");
                });

            modelBuilder.Entity("SriSloka.Model.Achievements", b =>
                {
                    b.Property<int>("AchievementsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcadamicHistoryId");

                    b.Property<int>("AchievementsCategoryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.HasKey("AchievementsId");

                    b.HasIndex("AcadamicHistoryId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("SriSloka.Model.AchievementsCategory", b =>
                {
                    b.Property<int>("AchievementsCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AchievementsCategoryId");

                    b.ToTable("AchievementsCategory");
                });

            modelBuilder.Entity("SriSloka.Model.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("HYDERABAD")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("INDIA")
                        .HasMaxLength(50);

                    b.Property<int>("PostCode");

                    b.Property<int?>("StaffId");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("TELANGANA")
                        .HasMaxLength(50);

                    b.Property<int?>("StudentId");

                    b.HasKey("AddressId");

                    b.HasIndex("StaffId")
                        .IsUnique()
                        .HasFilter("[StaffId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SriSloka.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StaffId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SriSloka.Model.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("IsPresent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ReasonForAbsence")
                        .HasMaxLength(250);

                    b.Property<int>("StaffId");

                    b.Property<int>("StudentId");

                    b.HasKey("AttendanceId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SriSloka.Model.AuthorisedCareTakers", b =>
                {
                    b.Property<int>("AuthorisedCareTakersId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StudentId");

                    b.HasKey("AuthorisedCareTakersId");

                    b.HasIndex("StudentId");

                    b.ToTable("AuthorisedCareTakers");
                });

            modelBuilder.Entity("SriSloka.Model.Enrollments", b =>
                {
                    b.Property<int>("EnrollmentsId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsActive");

                    b.Property<int>("StandardId");

                    b.Property<int>("StudentId");

                    b.HasKey("EnrollmentsId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SriSloka.Model.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExamCategoryId");

                    b.Property<DateTime>("ExamDate");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastModifiedBy");

                    b.Property<decimal>("MaximumMarks");

                    b.Property<decimal>("MinimumMarks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("StandardId");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TeacherId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("ExamId");

                    b.HasIndex("ExamCategoryId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("SriSloka.Model.ExamCategory", b =>
                {
                    b.Property<int>("ExamCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.HasKey("ExamCategoryId");

                    b.ToTable("ExamCategory");
                });

            modelBuilder.Entity("SriSloka.Model.ExamResults", b =>
                {
                    b.Property<int>("ExamResultsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcadamicHistoryId");

                    b.Property<int>("ExamId");

                    b.Property<int>("Grade");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<bool>("IsFailed");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("LastModifiedBy");

                    b.Property<decimal>("Marks");

                    b.Property<string>("Remarks")
                        .HasMaxLength(150);

                    b.Property<DateTime>("ResultsPublishedDate")
                        .HasColumnType("Date");

                    b.Property<int>("TeacherId");

                    b.Property<DateTime>("UpdatedDateTime");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("ExamResultsId");

                    b.HasIndex("AcadamicHistoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("SriSloka.Model.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ExpenseCategoryId");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("SriSloka.Model.Expenses", b =>
                {
                    b.Property<int>("ExpensesId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ExpenseCategoryId");

                    b.Property<int>("Frequency");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsProofSubmitted");

                    b.Property<bool>("IsRecurring");

                    b.Property<string>("LastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("ExpensesId");

                    b.HasIndex("ExpenseCategoryId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SriSloka.Model.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualAmountPaid");

                    b.Property<decimal>("AmountPayable");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsFullyPaid");

                    b.Property<string>("LastModifiedBy");

                    b.Property<int>("StudentId");

                    b.Property<int>("TermId");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("FeeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("SriSloka.Model.Homework", b =>
                {
                    b.Property<int>("HomeworkId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("LastDateToSubmit")
                        .HasColumnType("Date");

                    b.Property<int>("StandardId");

                    b.Property<int>("SubjectsId");

                    b.Property<int>("TeacherId");

                    b.HasKey("HomeworkId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Homework");
                });

            modelBuilder.Entity("SriSloka.Model.HomeworkSubmission", b =>
                {
                    b.Property<int>("HomeworkId");

                    b.Property<int>("Grade");

                    b.Property<int>("StudentId");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworkSubmission");
                });

            modelBuilder.Entity("SriSloka.Model.Liabilities", b =>
                {
                    b.Property<int>("LiabilitiesId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountPayable");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ExpenseCategoryId");

                    b.Property<int>("Frequency");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("LiabilitiesId");

                    b.HasIndex("ExpenseCategoryId");

                    b.ToTable("Liabilities");
                });

            modelBuilder.Entity("SriSloka.Model.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Callsite")
                        .HasMaxLength(2500);

                    b.Property<string>("Exception")
                        .HasMaxLength(2500);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Logged");

                    b.Property<string>("Logger")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2500);

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("SriSloka.Model.Observations", b =>
                {
                    b.Property<int>("ObservationsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcadamicHistoryId");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<string>("LastModifiedBy");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("TeacherId");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("ObservationsId");

                    b.HasIndex("AcadamicHistoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("SriSloka.Model.Photos", b =>
                {
                    b.Property<int>("PhotosId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Photo")
                        .IsRequired();

                    b.Property<int?>("StaffId");

                    b.Property<int?>("StudentId");

                    b.HasKey("PhotosId");

                    b.HasIndex("StaffId")
                        .IsUnique()
                        .HasFilter("[StaffId] IS NOT NULL");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("SriSloka.Model.Salary", b =>
                {
                    b.Property<int>("SalaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Allowance");

                    b.Property<DateTime>("InsertedTime");

                    b.Property<string>("LastModifiedBy");

                    b.Property<decimal>("MonthlySalary");

                    b.Property<DateTime>("SalaryStartDate")
                        .HasColumnType("Date");

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<decimal?>("YearlyBonus");

                    b.HasKey("SalaryId");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("SriSloka.Model.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsAllDayEvent");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("TeacherId");

                    b.Property<DateTime>("To");

                    b.HasKey("ScheduleId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("SriSloka.Model.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AadhaarCardNo")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasMaxLength(50);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("HighestQualification");

                    b.Property<string>("HighestQualificationMajorSubject");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsPoliceVerificationDone");

                    b.Property<bool>("IsWorkingForUs");

                    b.Property<DateTime>("LastWorkingDay");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MobileNo");

                    b.Property<string>("MotherName");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<int>("Sex");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SriSloka.Model.Standard", b =>
                {
                    b.Property<int>("StandardId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("TeacherId");

                    b.HasKey("StandardId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Standard");
                });

            modelBuilder.Entity("SriSloka.Model.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertedTime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastModifiedBy");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Sex");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SriSloka.Model.StudentDetails", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("AddressId");

                    b.Property<string>("FatherFirstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("FatherHighestQualification");

                    b.Property<string>("FatherLastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FatherMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("FatherWorkingAs")
                        .HasMaxLength(50);

                    b.Property<string>("MotherFirstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MotherHighestQualification");

                    b.Property<string>("MotherLastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MotherMobileNumber")
                        .HasMaxLength(15);

                    b.Property<string>("MotherWokringAs")
                        .HasMaxLength(50);

                    b.Property<string>("PreviousSchoolName")
                        .HasMaxLength(50);

                    b.Property<string>("ReasonForChange")
                        .HasMaxLength(150);

                    b.Property<string>("ReasonForLeaving")
                        .HasMaxLength(150);

                    b.HasKey("StudentId");

                    b.HasIndex("AddressId");

                    b.ToTable("StudentDetails");
                });

            modelBuilder.Entity("SriSloka.Model.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("TeacherId");

                    b.HasKey("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SriSloka.Model.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("YearsOfExperience");

                    b.HasKey("TeacherId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("SriSloka.Model.TeacherClass", b =>
                {
                    b.Property<int>("TeacherClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StandardId");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TeacherId");

                    b.HasKey("TeacherClassId");

                    b.ToTable("TeacherClass");
                });

            modelBuilder.Entity("SriSloka.Model.Terms", b =>
                {
                    b.Property<int>("TermsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcadamicYear");

                    b.Property<DateTime>("End")
                        .HasColumnType("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("Start")
                        .HasColumnType("Date");

                    b.HasKey("TermsId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("SriSloka.Model.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SriSloka.Model.Traits", b =>
                {
                    b.Property<int>("TraitsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SubjectId");

                    b.HasKey("TraitsId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("SriSloka.Model.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("DistanceInKms");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StudentId");

                    b.HasKey("TransportId");

                    b.HasIndex("StudentId");

                    b.ToTable("PublicTransport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SriSloka.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SriSloka.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SriSloka.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SriSloka.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.AcadamicHistory", b =>
                {
                    b.HasOne("SriSloka.Model.Student")
                        .WithOne("AcadamicHistory")
                        .HasForeignKey("SriSloka.Model.AcadamicHistory", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Achievements", b =>
                {
                    b.HasOne("SriSloka.Model.AcadamicHistory")
                        .WithMany("Achivements")
                        .HasForeignKey("AcadamicHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Address", b =>
                {
                    b.HasOne("SriSloka.Model.Staff")
                        .WithOne("Address")
                        .HasForeignKey("SriSloka.Model.Address", "StaffId");
                });

            modelBuilder.Entity("SriSloka.Model.ApplicationUser", b =>
                {
                    b.HasOne("SriSloka.Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Attendance", b =>
                {
                    b.HasOne("SriSloka.Model.Staff")
                        .WithMany("StaffAttendance")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SriSloka.Model.Student")
                        .WithMany("StudentAttendance")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.AuthorisedCareTakers", b =>
                {
                    b.HasOne("SriSloka.Model.Student")
                        .WithMany("CareTakers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Enrollments", b =>
                {
                    b.HasOne("SriSloka.Model.Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Exam", b =>
                {
                    b.HasOne("SriSloka.Model.ExamCategory", "ExamCategory")
                        .WithMany()
                        .HasForeignKey("ExamCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.ExamResults", b =>
                {
                    b.HasOne("SriSloka.Model.AcadamicHistory")
                        .WithMany("ExamResults")
                        .HasForeignKey("AcadamicHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SriSloka.Model.Teacher")
                        .WithMany("ExamResults")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Expenses", b =>
                {
                    b.HasOne("SriSloka.Model.ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Fee", b =>
                {
                    b.HasOne("SriSloka.Model.Student")
                        .WithMany("Fees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Homework", b =>
                {
                    b.HasOne("SriSloka.Model.Teacher")
                        .WithMany("Homeworks")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.HomeworkSubmission", b =>
                {
                    b.HasOne("SriSloka.Model.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SriSloka.Model.Student")
                        .WithMany("HomeworkSubmissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Liabilities", b =>
                {
                    b.HasOne("SriSloka.Model.ExpenseCategory")
                        .WithMany("Liabilitieses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Observations", b =>
                {
                    b.HasOne("SriSloka.Model.AcadamicHistory")
                        .WithMany("Observations")
                        .HasForeignKey("AcadamicHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SriSloka.Model.Teacher")
                        .WithMany("Observations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Photos", b =>
                {
                    b.HasOne("SriSloka.Model.Staff")
                        .WithOne("Photos")
                        .HasForeignKey("SriSloka.Model.Photos", "StaffId");

                    b.HasOne("SriSloka.Model.Student")
                        .WithOne("Photos")
                        .HasForeignKey("SriSloka.Model.Photos", "StudentId");
                });

            modelBuilder.Entity("SriSloka.Model.Salary", b =>
                {
                    b.HasOne("SriSloka.Model.Staff")
                        .WithOne("Salary")
                        .HasForeignKey("SriSloka.Model.Salary", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Schedule", b =>
                {
                    b.HasOne("SriSloka.Model.Teacher")
                        .WithMany("Schedule")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Standard", b =>
                {
                    b.HasOne("SriSloka.Model.Teacher")
                        .WithMany("Standards")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SriSloka.Model.StudentDetails", b =>
                {
                    b.HasOne("SriSloka.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SriSloka.Model.Student", "Student")
                        .WithOne("StudentDetails")
                        .HasForeignKey("SriSloka.Model.StudentDetails", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Subject", b =>
                {
                    b.HasOne("SriSloka.Model.Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SriSloka.Model.Token", b =>
                {
                    b.HasOne("SriSloka.Model.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Traits", b =>
                {
                    b.HasOne("SriSloka.Model.Subject")
                        .WithMany("Traits")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SriSloka.Model.Transport", b =>
                {
                    b.HasOne("SriSloka.Model.Student", "Student")
                        .WithMany("Transport")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
